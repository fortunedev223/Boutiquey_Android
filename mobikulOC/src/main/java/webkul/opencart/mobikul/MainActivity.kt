package webkul.opencart.mobikulimport android.annotation.TargetApiimport android.app.Dialogimport android.arch.lifecycle.Lifecycleimport android.arch.lifecycle.LifecycleObserverimport android.arch.lifecycle.OnLifecycleEventimport android.content.*import android.content.res.Configurationimport android.databinding.DataBindingUtilimport android.graphics.Colorimport android.graphics.drawable.LayerDrawableimport android.net.ConnectivityManagerimport android.os.Buildimport android.os.Bundleimport android.os.Handlerimport android.speech.RecognizerIntentimport android.support.v4.content.ContextCompatimport android.support.v4.content.LocalBroadcastManagerimport android.support.v4.view.GravityCompatimport android.support.v4.view.ViewPagerimport android.support.v4.widget.DrawerLayoutimport android.support.v4.widget.SwipeRefreshLayoutimport android.support.v7.app.ActionBarDrawerToggleimport android.support.v7.app.AppCompatDelegateimport android.support.v7.content.res.AppCompatResourcesimport android.support.v7.widget.LinearLayoutManagerimport android.support.v7.widget.Toolbarimport android.util.Logimport android.view.Gravityimport android.view.Menuimport android.view.MenuItemimport android.view.Viewimport android.view.View.OnClickListenerimport android.view.animation.AlphaAnimationimport android.view.animation.Animationimport android.view.animation.AnimationSetimport android.view.animation.LayoutAnimationControllerimport android.view.animation.TranslateAnimationimport android.widget.*import com.facebook.AccessTokenimport com.facebook.CallbackManagerimport com.facebook.FacebookCallbackimport com.facebook.FacebookExceptionimport com.facebook.FacebookSdkimport com.facebook.login.LoginManagerimport com.facebook.login.LoginResultimport com.facebook.login.widget.LoginButtonimport com.google.android.gms.auth.api.Authimport com.google.android.gms.auth.api.signin.GoogleSignInAccountimport com.google.android.gms.auth.api.signin.GoogleSignInOptionsimport com.google.android.gms.common.ConnectionResultimport com.google.android.gms.common.api.GoogleApiClientimport com.google.firebase.auth.FacebookAuthProviderimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.GoogleAuthProviderimport com.google.gson.Gsonimport kotlinx.android.synthetic.main.activity_main.*import org.greenrobot.eventbus.EventBusimport org.json.JSONExceptionimport org.json.JSONObjectimport java.util.ArrayListimport java.util.HashMapimport java.util.HashSetimport java.util.Timerimport java.util.TimerTaskimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport webkul.opencart.mobikul.activity.SearchDialogActivityimport webkul.opencart.mobikul.activity.SubCategoryV3Themeimport webkul.opencart.mobikul.adapter.*import webkul.opencart.mobikul.adapterModel.CarousalAdapterModelimport webkul.opencart.mobikul.adapterModel.HomePageAdapteModelimport webkul.opencart.mobikul.loginlistener.LoginCheckerimport webkul.opencart.mobikul.fragment.ProfileFragmentimport webkul.opencart.mobikul.handlers.BottomNavigationHandlerimport webkul.opencart.mobikul.handlers.MainActivityHandlerimport webkul.opencart.mobikul.helper.*import webkul.opencart.mobikul.helper.Constantimport webkul.opencart.mobikul.callback.FacebookLoginimport webkul.opencart.mobikul.callback.GoogleLoginimport webkul.opencart.mobikul.model.GetHomePage.HomeDataModelimport webkul.opencart.mobikul.model.SocailLoginModel.SocailLoginimport webkul.opencart.mobikul.networkManager.RetrofitCallbackimport webkul.opencart.mobikul.networkManager.RetrofitCustomCallbackimport webkul.opencart.mobikul.roomdatabase.AppDataBaseControllerimport webkul.opencart.mobikul.roomdatabase.RecentViewedTableimport webkul.opencart.mobikul.utils.MakeToastimport webkul.opencart.mobikul.utils.AppSharedPreferenceimport webkul.opencart.mobikul.utils.SweetAlertBoximport webkul.opencart.mobikul.analytics.MobikulApplicationimport webkul.opencart.mobikul.databinding.ActivityMainBindingimport webkul.opencart.mobikul.utils.MobikulDialog/*Webkul Software. *@Mobikul@OpencartMobikul@author Webkul@copyright Copyright (c) 2010-2018 Webkul Software Private Limited (https://webkul.com)@license https://store.webkul.com/license.html */class MainActivity : BaseActivity(), GoogleApiClient.OnConnectionFailedListener, OnClickListener, GoogleLogin, FacebookLogin {    private var mGoogleApiClient: GoogleApiClient? = null    private var mAuthListener: FirebaseAuth.AuthStateListener? = null    private var mCallbackManager: CallbackManager? = null    private val TAG = "MainActivity"    private val RC_SIGN_IN = 9001    protected lateinit var notificationSharedMainActivity: SharedPreferences    private var timer: Timer? = null    private var mAuth: FirebaseAuth? = null    internal var page = 0    private lateinit var dotList: Array<ImageView?>    private lateinit var imageUrls: Array<String?> // images contained in banner    private var pager: ViewPager? = null    private var toolbarMainActivity: Toolbar? = null    var mMainActivityBinding: ActivityMainBinding? = null    private var mDrawerLayout: DrawerLayout? = null    protected var mDrawerToggle: ActionBarDrawerToggle? = null    var homeCartIcon: MenuItem? = null    private var handler: MainActivityHandler? = null    private var bottomHandler: BottomNavigationHandler? = null    private var refreshLayout: SwipeRefreshLayout? = null    private var homeDataModelCallback: Callback<HomeDataModel>? = null    private var socailLoginCallback: Callback<SocailLogin>? = null    private var bottomHome: ImageView? = null    private var bottomCategory: ImageView? = null    private var bottomNotification: ImageView? = null    private var bottomAccount: ImageView? = null    private var backPressedTime: Long = 0    override fun onBackPressed() {        val t = System.currentTimeMillis()        val count = supportFragmentManager.backStackEntryCount        if (count == 1) {            mMainActivityBinding?.container?.visibility = View.GONE            mMainActivityBinding?.refresh?.visibility = View.VISIBLE            setBottomHomeDefaultView()            setHomeBottomView()            super.onBackPressed()        }        if (t - backPressedTime > 2000) {            backPressedTime = t            Toast.makeText(this, resources.getString(R.string.press_back_to_exit), Toast.LENGTH_SHORT).show()            if (mDrawerLayout != null && mDrawerLayout!!.isDrawerOpen(GravityCompat.START)) {                mDrawerLayout?.closeDrawer(GravityCompat.START)            } else if (mDrawerLayout != null && mDrawerLayout!!.isDrawerOpen(GravityCompat.END)) {                mDrawerLayout?.closeDrawer(GravityCompat.END)            }        } else {            super.onBackPressed()        }    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true)        isOnline()        if (intent.hasExtra("crash")) {            Toast.makeText(this,                    intent.getStringExtra("crash"),                    Toast.LENGTH_LONG).show()        }        setDataFromExtras()        if (homeDataModel == null) {            makeHomeDataCall()        } else {            initializeHome()        }    }    fun makeHomeDataCall() {        homeDataModelCallback = object : Callback<HomeDataModel> {            override fun onResponse(call: Call<HomeDataModel>, response: Response<HomeDataModel>) {                if (SweetAlertBox.sweetAlertDialog != null) {                    SweetAlertBox.dissmissSweetAlertBox()                }                homeDataModel = response.body()!!                initializeHome()            }            override fun onFailure(call: Call<HomeDataModel>, t: Throwable) {                t.printStackTrace()            }        }        SweetAlertBox().showProgressDialog(this@MainActivity)        RetrofitCallback.getHomePageCall(this@MainActivity, "",                RetrofitCustomCallback(homeDataModelCallback, this@MainActivity),                webkul.opencart.mobikul.helper.Utils.getScreenWidth(), "")    }    private fun initializeHome() {        setLocale()        configShared = getSharedPreferences("configureView", Context.MODE_PRIVATE)        mMainActivityBinding = DataBindingUtil.setContentView(this@MainActivity, R.layout.activity_main)        handler = MainActivityHandler(this@MainActivity)        mMobikulApplication = application as MobikulApplication        FacebookSdk.sdkInitialize(applicationContext)        mCallbackManager = CallbackManager.Factory.create()        initializeSocialLogin()        initializeConfiguration()        mMainActivityBinding?.homedata = homeDataModel    }    private fun initializeSocialLogin() {        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)                .requestIdToken(getString(R.string.default_web_client_id))                .requestEmail()                .build()        mGoogleApiClient = GoogleApiClient.Builder(this)                .enableAutoManage(this, this)                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)                .build()        mAuth = FirebaseAuth.getInstance()        mAuthListener = FirebaseAuth.AuthStateListener { firebaseAuth ->            val user = firebaseAuth.currentUser            if (user != null) {                // User is signed in            } else {                // User is signed out            }        }    }    fun checkConnection(): Boolean {        val conMgr = applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager        val netInfo = conMgr.activeNetworkInfo        return !(netInfo == null || !netInfo.isConnected || !netInfo.isAvailable)    }    private fun initializeConfiguration() {        try {            createBrowserUri()            deepLinking()            fragmentName = HashMap()            for (i in fragmentNameArray.indices) {                fragmentName!![fragmentNameArray[i]] = i            }            mAuth = FirebaseAuth.getInstance()            mMainActivityBinding?.let { it.data = LoginChecker(this@MainActivity) }            mMainActivityBinding?.let { it.handlers = handler }            setToolbar()            initializeActivityLayout()            callBackInitialization()            adapterInitialization()            refreshLayout?.setColorSchemeColors(Color.MAGENTA, Color.CYAN, Color.BLUE, Color.YELLOW, Color.GRAY)            refreshLayout?.setOnRefreshListener {                if (!checkConnection()) {                    refreshLayout?.isRefreshing = false                    showDialog(this)                } else {                    RetrofitCallback.getHomePageCall(                            this@MainActivity,                            "",                            RetrofitCustomCallback(homeDataModelCallback, this@MainActivity),                            webkul.opencart.mobikul.helper.Utils.getScreenWidth(), "1")                }            }            setupDrawerLayout()            setBannerImages()            updateHomeData()            setBrandsLayout()            mMainActivityBinding?.toTop?.setOnClickListener {                scroll_view?.fullScroll(ScrollView.FOCUS_UP)            }        } catch (e: Exception) {            trackException(e, this@MainActivity)            e.printStackTrace()        }    }    private fun setToolbar() {        toolbarMainActivity = mMainActivityBinding?.toolbar?.findViewById<View>(R.id.toolbar) as Toolbar        setSupportActionBar(toolbarMainActivity)        val actionBar = supportActionBar        actionBar?.setDisplayHomeAsUpEnabled(true)        setTitle(resources.getString(R.string.app_name))        val title = mMainActivityBinding?.toolbar?.findViewById<TextView>(R.id.title)        title?.text = getString(R.string.app_name)    }    private fun setBrandsLayout() {        if (homeDataModel?.carousalList != null &&                homeDataModel?.carousalList?.size != 0) {            val carsoualSize = homeDataModel?.carousalList?.size!!            if (carsoualSize == 0) {                mMainActivityBinding?.browseByBrandsLayout?.visibility = View.GONE            }            if (homeDataModel?.carousalList?.size!! != 0) {                mMainActivityBinding?.browseByBrands?.visibility = View.VISIBLE                val tempCarousalList = ArrayList<CarousalAdapterModel>()                homeDataModel?.carousalList?.map {                    tempCarousalList.add(CarousalAdapterModel(                            it.title!!,                            it.image!!,                            it.link!!,                            it.dominantColor))                }                handler?.getBrands(tempCarousalList)            }        } else {            mMainActivityBinding?.browseByBrandsLayout?.visibility = View.GONE        }    }    private fun callBackInitialization() {        socailLoginCallback = object : Callback<SocailLogin> {            override fun onResponse(call: Call<SocailLogin>, response: Response<SocailLogin>) {                if (SweetAlertBox.sweetAlertDialog != null) {                    SweetAlertBox.dissmissSweetAlertBox()                }                if (response.body()?.error == 1) {                    MakeToast().shortToast(this@MainActivity, response.body()?.message)                } else {                    AppSharedPreference.editSharedPreference(this@MainActivity,                            Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CART_ITEMS, response.body()?.cartTotal)                    AppSharedPreference.editSharedPreference(this@MainActivity,                            Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CUSTOMER_EMAIL, response.body()?.email!!)                    AppSharedPreference.editSharedPreference(this@MainActivity,                            Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CUSTOMER_ID, response.body()?.customerId!!)                    AppSharedPreference.editSharedPreference(this@MainActivity,                            Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CUSTOMER_NAME, response.body()?.firstname!!)                    AppSharedPreference.editBooleanSharedPreference(this@MainActivity,                            Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Constant.CUSTOMER_SHARED_PREFERENCE_KEY_IS_LOGGED_IN, true)                    onResume()                }            }            override fun onFailure(call: Call<SocailLogin>, t: Throwable) {            }        }        homeDataModelCallback = object : Callback<HomeDataModel> {            override fun onResponse(call: Call<HomeDataModel>, response: Response<HomeDataModel>?) {                if (response?.body()?.error != 1) {                    homeDataModel = response?.body()                    mMainActivityBinding?.homedata = response?.body()                    Handler().postDelayed(object : Thread() {                        override fun run() {                            refreshLayout?.isRefreshing = false                            super.run()                        }                    }, 700)                    if (homeCartIcon != null) {                        val icon = homeCartIcon?.icon as LayerDrawable                        if (homeDataModel?.cart != null)                            Utils.setBadgeCount(this@MainActivity, icon, homeDataModel?.cart?.toString())                        AppSharedPreference.addCartItems(this@MainActivity, homeDataModel?.cart?.toString())                    }                }            }            override fun onFailure(call: Call<HomeDataModel>, t: Throwable) {            }        }    }    private fun createBrowserUri() {        val intent = Intent(Constant.BASE_URL)        intent.addCategory(Intent.CATEGORY_DEFAULT)        intent.addCategory(Intent.CATEGORY_BROWSABLE)        val bundle = Bundle()        bundle.putString("msg_from_browser", "Launched from Browser")        intent.putExtras(bundle)    }    private fun initializeActivityLayout() {        val scrollView = mMainActivityBinding?.scrollView        scrollView?.isNestedScrollingEnabled = true        refreshLayout = mMainActivityBinding?.refresh        if (homeDataModel != null) {            handler?.setHomeModelData(homeDataModel!!)        }        bottomNavigation()        pager = mMainActivityBinding?.bannerPager        if (homeDataModel?.languages?.code == "ar") {            pager?.rotationY = 180f            mMainActivityBinding?.dotGroup?.rotationY = 180f        }    }    private fun setupDrawerLayout() {        mDrawerLayout = mMainActivityBinding?.drawerLayout        mDrawerLayout?.setDrawerShadow(R.drawable.toolbar_overflow, Gravity.LEFT)        mDrawerLayout?.setScrimColor(Color.parseColor("#80000000"))        mDrawerToggle = setupDrawerToggle()        mDrawerLayout?.addDrawerListener(mDrawerToggle!!)        mDrawerToggle?.setHomeAsUpIndicator(R.drawable.toolbar_overflow)        mDrawerToggle?.isDrawerIndicatorEnabled = false        mDrawerToggle?.toolbarNavigationClickListener = OnClickListener {            if (mDrawerLayout?.isDrawerOpen(GravityCompat.END)!!) {                mDrawerLayout?.closeDrawer(GravityCompat.START)            } else if (mDrawerLayout?.isDrawerOpen(GravityCompat.START)!!) {                mDrawerLayout?.closeDrawer(GravityCompat.END)            }            mDrawerLayout?.openDrawer(GravityCompat.START)        }        handler?.setDrawerLayout(mDrawerLayout!!)    }    private fun bottomNavigation() {        bottomHome = mMainActivityBinding?.navigation!!.bottomHome        bottomCategory = mMainActivityBinding?.navigation!!.bottomCategory        bottomNotification = mMainActivityBinding?.navigation!!.bottomNotification        bottomAccount = mMainActivityBinding?.navigation!!.bottomAccount        bottomHandler = BottomNavigationHandler(                this@MainActivity,                bottomHome!!, bottomCategory!!,                bottomNotification!!, bottomAccount!!)        mMainActivityBinding?.navigation?.setHandler(bottomHandler)    }    public override fun onStop() {        mMainActivityBinding?.refresh?.visibility = View.VISIBLE        mMainActivityBinding?.container?.visibility = View.GONE        setBottomHomeDefaultView()        if (mAuthListener != null) {            mAuth?.removeAuthStateListener(mAuthListener!!)        }        super.onStop()    }    private fun setBottomHomeDefaultView() {        bottomCategory?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_category))        bottomHome?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_home))        bottomNotification?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_notification))        bottomAccount?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_user))        mMainActivityBinding?.navigation?.bottomHomeTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.gray))        mMainActivityBinding?.navigation?.bottomCategoryTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.gray))        mMainActivityBinding?.navigation?.bottomProfileTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.gray))        mMainActivityBinding?.navigation?.bottomNotificationTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.gray))    }    private fun deepLinking() {        if (intent != null) {            val uri = intent.data            try {                if (uri != null) {                    val referId = uri.getQueryParameter("product_id")                    if (referId != null) {                        val product_name = uri.getQueryParameter("name")                        val intent = Intent(this@MainActivity, ViewProductSimple::class.java)                        intent.putExtra("idOfProduct", referId)                        intent.putExtra("nameOfProduct", product_name)                        startActivity(intent)                    }                }            } catch (e: Exception) {                e.printStackTrace()            }        }    }    private fun setHomeBottomView() {        mMainActivityBinding?.navigation?.bottomHomeTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.accent_color))        mMainActivityBinding?.navigation?.bottomCategoryTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.gray))        mMainActivityBinding?.navigation?.bottomNotificationTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.gray))        mMainActivityBinding?.navigation?.bottomProfileTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.gray))        bottomCategory?.setImageResource(R.drawable.bottom_category)        bottomHome?.setImageResource(R.drawable.bottom_home_select)        bottomNotification?.setImageResource(R.drawable.bottom_notification)        bottomAccount?.setImageResource(R.drawable.bottom_user)    }    private fun adapterInitialization() {        val sellerProfileDrawable = AppCompatResources.getDrawable(this@MainActivity, R.drawable.seller_profile_home)        mMainActivityBinding?.sellerProfile?.setCompoundDrawablesRelativeWithIntrinsicBounds(sellerProfileDrawable, null, null, null)    }    private fun setupDrawerToggle(): ActionBarDrawerToggle {        return object : ActionBarDrawerToggle(this,                mDrawerLayout,                toolbarMainActivity,                R.string.drawer_open, R.string.drawer_close) {            override fun onDrawerClosed(drawerView: View) {                supportInvalidateOptionsMenu()            }            override fun onDrawerOpened(drawerView: View) {                supportInvalidateOptionsMenu()            }            override fun onDrawerSlide(drawerView: View, slideOffset: Float) {                super.onDrawerSlide(drawerView, slideOffset)                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {                    mMainActivityBinding?.container?.translationZ = slideOffset * drawerView.width                    mMainActivityBinding?.contentFrame?.translationZ = slideOffset * drawerView.width                }                mMainActivityBinding?.contentFrame?.alpha = 1 - slideOffset                mMainActivityBinding?.container?.translationX = slideOffset * drawerView.width                mMainActivityBinding?.contentFrame?.translationX = slideOffset * drawerView.width                mDrawerLayout?.bringChildToFront(drawerView)                mDrawerLayout?.requestLayout()            }        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        mCallbackManager?.onActivityResult(requestCode, resultCode, data)        if (requestCode == RC_SIGN_IN) {            val result = Auth.GoogleSignInApi.getSignInResultFromIntent(data)            if (result.isSuccess) {                val acct = result.signInAccount!!                SweetAlertBox().showProgressDialog(this@MainActivity)                RetrofitCallback.addSocailLogin(this@MainActivity,                        acct.displayName!!,                        acct.displayName!!,                        acct.email!!,                        acct.id!!,                        RetrofitCustomCallback(socailLoginCallback, this@MainActivity))                val account = result.signInAccount                firebaseAuthWithGoogle(account!!)            } else {                Log.e(TAG, "Google Sign In failed.")            }        }        if (requestCode == 1010) {            bottomHandler?.onClickHomeTab()        }    }    private fun firebaseAuthWithGoogle(acct: GoogleSignInAccount) {        Log.d(TAG, "firebaseAuthWithGooogle:" + acct.id!!)        val credential = GoogleAuthProvider.getCredential(acct.idToken, null)        mAuth?.signInWithCredential(credential)                ?.addOnCompleteListener(this) { task ->                    Log.d(TAG, "signInWithCredential:onComplete:" + task.isSuccessful)                    if (!task.isSuccessful) {                        Log.w(TAG, "signInWithCredential", task.exception)                    } else {                    }                }    }    private fun setDataFromExtras() {        val extras = intent.extras        if (extras != null && extras.containsKey("data")) {            try {                val `object` = JSONObject(extras.getString("data"))                homeDataModel = Gson().fromJson(`object`.toString(), HomeDataModel::class.java)                EventBus.getDefault().post(homeDataModel)                if (homeDataModel != null) {                    AppSharedPreference.setGuestStatus(this, homeDataModel?.isGuestStatus)                }                if (homeDataModel != null && homeDataModel?.gdprStatus != 0) {                    val status = if (homeDataModel?.gdprStatus == 1) true else false                    AppSharedPreference.setGDPRStatus(this, status)                }                AppSharedPreference.putGdprStatus(this, homeDataModel?.gdprStatus.toString())            } catch (e: JSONException) {                e.printStackTrace()            }        }        if (homeCartIcon != null) {            val customerDataShared = getSharedPreferences(Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE)            AppSharedPreference.editSharedPreference(this,                    Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CART_ITEMS, homeDataModel?.cart.toString())            val icon = homeCartIcon!!.icon as LayerDrawable            Utils.setBadgeCount(this, icon, customerDataShared.getString("cartItems", "0"))        }    }    override fun onPostCreate(savedInstanceState: Bundle?) {        super.onPostCreate(savedInstanceState)        if (mDrawerToggle != null) {            mDrawerToggle?.syncState()!!        }    }    /* On page listener for view pager */    override fun onConfigurationChanged(newConfig: Configuration) {        super.onConfigurationChanged(newConfig)        mDrawerToggle?.onConfigurationChanged(newConfig)    }    /*Image Adapter for loading banner view pager through urls*/    override fun onOptionsItemSelected(item: MenuItem): Boolean {        val id = item.itemId        val shared = getSharedPreferences(Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE)        val isLoggedIn = shared.getBoolean("isLoggedIn", false)        if (id == R.id.action_settings) {            if (isLoggedIn) {                startActivity(Intent(this@MainActivity, MyWishlistActivity::class.java))            } else {                SweetAlertBox().showWarningWishlistPopUp(this@MainActivity, "", resources.getString(R.string.guest_wishlist_msg))            }            return true        } else if (id == R.id.action_cart) {            startActivity(Intent(this@MainActivity, Cart::class.java))            return true        } else if (id == R.id.search) {            val intent = Intent(this@MainActivity, SearchDialogActivity::class.java)            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP            startActivity(intent)        }        return true    }    override fun onCreateOptionsMenu(menu: Menu): Boolean {        return true    }    override fun onPrepareOptionsMenu(menu: Menu): Boolean {        menuInflater.inflate(R.menu.home_menu, menu)        homeCartIcon = menu.findItem(R.id.action_cart)        if (homeCartIcon != null) {            AppSharedPreference.editSharedPreference(this@MainActivity,                    Constant.CUSTOMER_SHARED_PREFERENCE_NAME,                    Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CART_ITEMS, homeDataModel?.cart                    .toString())            val icon = homeCartIcon?.icon as LayerDrawable            Utils.setBadgeCount(this@MainActivity, icon,                    AppSharedPreference.getCartItems(this@MainActivity,                            Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CART_ITEMS))        }        return true    }    private fun setBannerImages() {        if (homeDataModel?.banners?.size!! != 0) {            imageUrls = arrayOfNulls(homeDataModel!!.banners!!.size)            for (i in 0 until homeDataModel!!.banners!!.size) {                imageUrls[i] = homeDataModel!!.banners!![i].image            }            dotList = arrayOfNulls(imageUrls.size)            val group = mMainActivityBinding?.dotGroup            dotList = arrayOfNulls(imageUrls.size)            pageSwitcher(6, imageUrls.size)            for (i in imageUrls.indices) {                val dotImage = ImageView(this@MainActivity)                dotList[i] = dotImage                if (i == 0) {                    dotList[i]?.setBackgroundResource(R.drawable.selected_dot_icon)                } else {                    dotList[i]?.setBackgroundResource(R.drawable.unselected_dot_icon)                }                val params = LinearLayout.LayoutParams(webkul.opencart.mobikul.helper.Utils.getDeviceScreenWidth() / 45,                        webkul.opencart.mobikul.helper.Utils.getDeviceScreenWidth() / 45)                params.setMargins(10, 0, 10, 0)                group?.addView(dotImage, params)            }            pager?.addOnPageChangeListener(DetailOnPageChangeListener(imageUrls, dotList))        } else {            mMainActivityBinding?.pagerLayout?.visibility = View.GONE        }    }    fun pageSwitcher(seconds: Int, length: Int) {        val swipeAtInterval = RemindTask(length)        timer = Timer()        timer?.scheduleAtFixedRate(swipeAtInterval, 0, (seconds * 1500).toLong())    }    fun setSignOutSocialLogin() {        val shared = getSharedPreferences(Constant.CUSTOMER_SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE)        val isLoggedIn = shared.getBoolean("isLoggedIn", false)        if (!isLoggedIn) {            if (mGoogleApiClient != null && mGoogleApiClient!!.isConnected) {                Auth.GoogleSignInApi.signOut(mGoogleApiClient)            }        }    }    public override fun onResume() {        checkRecenViewedProduct()        setSignOutSocialLogin()        if (intent.hasExtra(Constant.CART_TO_HOMEPAGE)) {            mMainActivityBinding?.container?.visibility = View.GONE            mMainActivityBinding?.refresh?.visibility = View.VISIBLE            setBottomHomeDefaultView()            setHomeBottomView()        }        if (mMainActivityBinding != null) {            if (supportFragmentManager.backStackEntryCount == 0) {                mMainActivityBinding?.navigation?.bottomHomeTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.accent_color))                bottomHome?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_home_select))            }            setBottomNavigationHome()            if (itemBell != null) {                notificationSharedMainActivity = getSharedPreferences("com.webkul.mobikul.notification", Context.MODE_MULTI_PROCESS)                val icon = itemBell!!.icon as LayerDrawable                val unreadNotifications = notificationSharedMainActivity.getStringSet("unreadNotifications", HashSet<String>()) as HashSet<String>                Utils.setBadgeCount(this, icon, unreadNotifications.size.toString() + "" + "")            }            configShared = getSharedPreferences("configureView", Context.MODE_PRIVATE)            val editor = configShared.edit()            editor.putBoolean("isMainCreated", true)            editor.apply()        }        if (homeCartIcon != null) {            val icon = homeCartIcon?.icon as LayerDrawable            Utils.setBadgeCount(this@MainActivity, icon, AppSharedPreference.getCartItems(this@MainActivity,                    Constant.CUSTOMER_SHARED_PREFERENCE_KEY_CART_ITEMS))        }        super.onResume()    }    private fun updateHomeData() {        if (intent?.hasExtra("updateHome")!! && intent.getBooleanExtra("updateHome", false)) {            refreshLayout?.isRefreshing = true            RetrofitCallback.getHomePageCall(                    this@MainActivity,                    "",                    RetrofitCustomCallback(homeDataModelCallback, this@MainActivity),                    webkul.opencart.mobikul.helper.Utils.getScreenWidth(), "1")            val set = AnimationSet(true)            var animation: Animation = AlphaAnimation(0.0f, 1.0f)            animation.duration = 400            set.addAnimation(animation)            animation = TranslateAnimation(                    Animation.RELATIVE_TO_SELF, 0.0f, Animation.RELATIVE_TO_SELF, 0.0f,                    Animation.RELATIVE_TO_SELF, -1.0f, Animation.RELATIVE_TO_SELF, 0.0f)            animation.setDuration(300)            set.addAnimation(animation)            val controller = LayoutAnimationController(set, 0.45f)            pager?.layoutAnimation = controller        }    }    private fun checkRecenViewedProduct() {        val list: List<RecentViewedTable>? = AppDataBaseController.getRecentViewedProducts(this)        if (list?.size!! != 0) {            mMainActivityBinding?.recentViewedContainer?.visibility = View.VISIBLE            setRecentViewedProductData(list)        }    }    private fun setRecentViewedProductData(list: List<RecentViewedTable>) {        val recyclerView = mMainActivityBinding?.recentViewed        val homePageAdapteModels = ArrayList<HomePageAdapteModel>()        for (i in list.indices) {            homePageAdapteModels.add(HomePageAdapteModel(                    list.get(i).productImage,                    list.get(i).productPrice,                    list.get(i).prouductName,                    list.get(i).productId,                    list.get(i).productSpecialPrice,                    list.get(i).formattedSpecial,                    list.get(i).productHasOption,                    list.get(i).wishlist_status!!,                    "#cdbac0"))        }        recyclerView?.adapter = MainAcitivityAdapter(this, homePageAdapteModels, Type.RECENT)        recyclerView?.setLinearLayoutManager(this, LinearLayoutManager.HORIZONTAL)    }    private fun setBottomNavigationHome() {        var topOnStackFragment = ""        if (supportFragmentManager.backStackEntryCount >= 1) {            topOnStackFragment = supportFragmentManager                    .findFragmentByTag(this.supportFragmentManager                            .getBackStackEntryAt(supportFragmentManager.backStackEntryCount - 1)                            .name)?.javaClass?.simpleName!!        } else {            topOnStackFragment = fragmentNameArray[0]        }        when (fragmentName!![topOnStackFragment]) {            0 -> {                mMainActivityBinding?.navigation?.bottomHomeTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.accent_color))                bottomHome?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_home_select))            }            1 -> {                bottomCategory?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_category_select))                setBottomNavLayout(fragmentNameArray[1])                mMainActivityBinding?.navigation?.bottomCategoryTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.accent_color))            }            2 -> {                bottomNotification?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_notification_select))                setBottomNavLayout(fragmentNameArray[2])                mMainActivityBinding?.navigation?.bottomNotificationTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.accent_color))            }            3 -> {                bottomAccount?.setImageDrawable(AppCompatResources.getDrawable(this@MainActivity, R.drawable.bottom_user_select))                setBottomNavLayout(fragmentNameArray[3])                mMainActivityBinding?.navigation?.bottomProfileTv?.setTextColor(ContextCompat.getColor(this@MainActivity, R.color.accent_color))            }        }    }    fun setBottomNavLayout(fragment: String) {        mMainActivityBinding?.refresh?.visibility = View.GONE        mMainActivityBinding?.container?.visibility = View.VISIBLE        supportFragmentManager.findFragmentByTag(fragment)?.let {            supportFragmentManager.beginTransaction()                    .replace(mMainActivityBinding!!.container.id, it, fragment)                    .commit()        }    }    override fun onUserInteraction() {        if (itemBell != null) {            notificationSharedMainActivity = getSharedPreferences("com.webkul.mobikul.notification", Context.MODE_MULTI_PROCESS)            val icon = itemBell!!.icon as LayerDrawable            val unreadNotifications = notificationSharedMainActivity.getStringSet("unreadNotifications", HashSet<String>()) as HashSet<String>            Utils.setBadgeCount(this, icon, unreadNotifications.size.toString() + "")        }    }    override fun onClick(v: View) {    }    override fun openGoogleLogin(check: Boolean) {        if (check) {            signIn()        }    }    private fun signIn() {        val signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient)        startActivityForResult(signInIntent, RC_SIGN_IN)    }    private fun firebaseAuthWithFacebook(token: AccessToken) {        val credential = FacebookAuthProvider.getCredential(token.token)        mAuth?.signInWithCredential(credential)                ?.addOnCompleteListener(this) { task ->                    Log.d(TAG, "signInWithCredential:onComplete:" + task.isSuccessful)                    if (!task.isSuccessful) {                        Log.w(TAG, "signInWithCredential", task.exception)                        Toast.makeText(this@MainActivity, "Authentication failed.",                                Toast.LENGTH_SHORT).show()                    } else {                        val fName = task.result?.additionalUserInfo?.profile!!["first_name"] as String                        val lName = task.result?.additionalUserInfo?.profile!!["last_name"] as String                        val email = task.result?.additionalUserInfo?.profile!!["email"] as String                        val id = task.result?.additionalUserInfo?.providerId!!                        SweetAlertBox().showProgressDialog(this@MainActivity)                        RetrofitCallback.addSocailLogin(this@MainActivity, fName, lName, email, id,                                RetrofitCustomCallback(socailLoginCallback, this@MainActivity))                    }                }    }    override fun openFaceBookLogin(check: Boolean) {        if (check) {            LoginManager.getInstance().logOut()            val loginButton = LoginButton(this@MainActivity)            loginButton.setReadPermissions("email", "public_profile", "user_birthday", "user_friends")            loginButton.registerCallback(mCallbackManager, object : FacebookCallback<LoginResult> {                override fun onSuccess(loginResult: LoginResult) {                    firebaseAuthWithFacebook(loginResult.accessToken)                }                override fun onCancel() {                    Log.d(TAG, "facebook:onCancel")                }                override fun onError(error: FacebookException) {                    Log.d(TAG, "facebook:onError", error)                }            })            loginButton.performClick()        }    }    override fun onConnectionFailed(connectionResult: ConnectionResult) {        Toast.makeText(this, "Google Play Services error.", Toast.LENGTH_SHORT).show()    }    internal inner class RemindTask(var noOfBanners: Int) : TimerTask() {        override fun run() {            runOnUiThread {                if (page > noOfBanners)                    timer?.cancel()                else if (page == noOfBanners - 1) {                    pager?.currentItem = 0                    page = 0                } else                    pager?.currentItem = ++page            }        }    }    public override fun onStart() {        if (mAuthListener != null) {            mAuth?.addAuthStateListener(mAuthListener!!)        }        super.onStart()    }    companion object {        var progress: Dialog? = null        var homeDataModel: HomeDataModel? = null        private val fragmentNameArray = arrayOf("home",                SubCategoryV3Theme::class.java.simpleName,                NotificationActivity::class.java.simpleName,                ProfileFragment::class.java.simpleName)        private var fragmentName: MutableMap<String, Int>? = null    }}